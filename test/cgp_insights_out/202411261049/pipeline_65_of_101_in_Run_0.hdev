<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MVTec_AD_Cable_Missing_mean_pipeline'</l>
<l>source_path := 'D:/evias_expmts/MVTecAnomalyDetection/cable_missing_train/images'</l>
<l>output_path := 'out/'</l>
<c></c>
<l>dev_update_on()</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try </l>
<c>        * ======</c>
<c>        * PATH 1</c>
<c>        * ======</c>
<c>        * GrayDilation</c>
<l>        A := 18</l>
<l>        B := 3</l>
<l>        GrayValueMax := 1</l>
<l>        get_image_type(Image, Type)</l>
<l>        gen_disc_se(StructElement, Type, A, B, GrayValueMax)</l>
<c></c>
<l>        gray_dilation(Image, StructElement, ImageDilation)</l>
<c>        </c>
<l>        Sigma := 0</l>
<l>        auto_threshold(ImageDilation, Regions1, Sigma)</l>
<c>        </c>
<l>        dev_display(Image)</l>
<l>        dev_display(Regions1)</l>
<l>        dev_disp_text('Regions1', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<c>        * ======</c>
<c>        * PATH 2</c>
<c>        * ======</c>
<c>        * eliminateminmax</c>
<l>        MaskWidth := 25</l>
<l>        MaskHeight := 13</l>
<l>        Gap := 11</l>
<l>        Mode := 2</l>
<l>        eliminate_min_max(Image, Image2, MaskWidth, MaskHeight, Gap, Mode)</l>
<c>        </c>
<c>        * sobel_amp</c>
<l>        FilterType := 'y'</l>
<l>        MaskSize := 5</l>
<l>        sobel_amp(Image2, Image2, FilterType, MaskSize)</l>
<c>        </c>
<l>        dev_display(Image2)</l>
<l>        dev_disp_text('Image2', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<c>        * ======</c>
<c>        * PATH 3</c>
<c>        * ======</c>
<c>        * sobel_amp</c>
<l>        FilterType := 'x_binomial'</l>
<l>        MaskSize := 7</l>
<l>        sobel_amp(Image, Image3, FilterType, MaskSize)</l>
<l>        dev_display(Image3)</l>
<c>        * local_threshold        </c>
<l>        Method := 'adapted_std_deviation'</l>
<l>        LightDark := 'light'</l>
<l>        MaskSize := 15</l>
<l>        Scale := 0.5</l>
<l>        convert_image_type(Image3, Image3, 'byte')</l>
<l>        local_threshold(Image3, Region3, Method, LightDark, ['mask_size', 'scale'], [MaskSize, Scale])</l>
<c>        * erosion1</c>
<l>        A_3 := 25</l>
<l>        B_3 := 7  </l>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        tuple_max2(A_3, B_3, max_rad)</l>
<l>        longer := A_3</l>
<l>        shorter := B_3            </l>
<l>        if (shorter &gt; longer)</l>
<l>            tmp := shorter</l>
<l>            shorter := longer</l>
<l>                    longer := tmp</l>
<l>        endif                </l>
<l>        phi := 0            </l>
<l>        tuple_ceil(max_rad + 1, max_rad_ceil)            </l>
<l>        gen_ellipse(EllipseStructElement3, max_rad_ceil, max_rad_ceil, phi, longer, shorter)</l>
<l>        erosion1(Region3, EllipseStructElement3, RegionErosion3, 37)  </l>
<c>        </c>
<l>        dev_display(Image)</l>
<l>        dev_display(Region3)</l>
<l>        dev_disp_text('Region3', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<c>        * =======</c>
<c>        * MERGE</c>
<c>        * =======</c>
<c>        </c>
<c>        * close edges</c>
<l>        *close_edges(RegionErosion3, Image2, Region2, 253)</l>
<c>        </c>
<c>        * Opening        </c>
<l>        A_4 := 17</l>
<l>        B_4 := 18  </l>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        tuple_max2(A_4, B_4, max_rad)</l>
<l>        longer := A_4</l>
<l>        shorter := B_4            </l>
<l>        if (shorter &gt; longer)</l>
<l>            tmp := shorter</l>
<l>            shorter := longer</l>
<l>                    longer := tmp</l>
<l>        endif                </l>
<l>        phi := 0            </l>
<l>        tuple_ceil(max_rad + 1, max_rad_ceil)            </l>
<l>        gen_ellipse(EllipseStructElement4, max_rad_ceil, max_rad_ceil, phi, longer, shorter)</l>
<l>        opening(Regions1, EllipseStructElement4, Region)</l>
<l>        dev_display(Image)</l>
<l>        dev_display(Region)</l>
<l>        dev_disp_text('Final', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
