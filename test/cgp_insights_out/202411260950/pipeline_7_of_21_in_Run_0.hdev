<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MVTec_AD_Cable_Missing_mean_pipeline'</l>
<l>source_path := 'D:/evias_expmts/MVTecAnomalyDetection/cable_missing_train/images'</l>
<l>output_path := 'out/'</l>
<c></c>
<l>dev_update_on()</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try                </l>
<c>        * ======</c>
<c>        * PATH 1</c>
<c>        * ======</c>
<c>        * GrayDilation</c>
<l>        A_1 := 9</l>
<l>        B_1 := 27</l>
<l>        GrayValueMax_1 := 10  </l>
<c>        * with struct element circle</c>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        get_image_type(Image, Type)</l>
<l>        gen_disc_se(StructElement, Type, A_1, B_1, GrayValueMax_1)</l>
<l>        gray_dilation(Image, StructElement, Image1)</l>
<c>        </c>
<c>        * RegionGrowing</c>
<l>        RasterHeight := 13</l>
<l>        RasterWidth := 1</l>
<l>        Tolerance := 19</l>
<l>        MinRegionSize := 50</l>
<l>        regiongrowing(Image1, Region1, RasterHeight, RasterWidth, Tolerance, MinRegionSize)</l>
<c>        </c>
<l>        dev_display(Image)   </l>
<l>        dev_display(Region1)</l>
<l>        dev_disp_text('Region2', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<c>        </c>
<c>        * ======</c>
<c>        * PATH 2</c>
<c>        * ======</c>
<c>        * medianimage</c>
<l>        MaskWidth := 13</l>
<l>        MaskHeight := 27</l>
<l>        median_image(Image, Image2, 'circle', 9, 60)</l>
<c>        </c>
<l>        dev_display(Image1)</l>
<c>        </c>
<c>        * sobel_amp</c>
<l>        FilterType := 'y'</l>
<l>        MaskSize := 5</l>
<l>        sobel_amp(Image2, Image2, FilterType, MaskSize)</l>
<c>        </c>
<l>        dev_display(Image2)</l>
<l>        dev_disp_text('Image2', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<c>        </c>
<c>        * ======</c>
<c>        * MERGE</c>
<c>        * ======</c>
<c>        * Opening        </c>
<l>        A_2 := 28</l>
<l>        B_2 := 24        </l>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        tuple_max2(A_2, B_2, max_rad)</l>
<l>        longer := A_2</l>
<l>        shorter := B_2            </l>
<l>        if (shorter &gt; longer)</l>
<l>            tmp := shorter</l>
<l>            shorter := longer</l>
<l>                    longer := tmp</l>
<l>        endif                </l>
<l>        phi := 0.0         </l>
<l>        tuple_ceil(max_rad + 1, max_rad_ceil)</l>
<l>        gen_ellipse(StructElement2, max_rad_ceil, max_rad_ceil, phi, longer, shorter)</l>
<l>        opening(Region1, StructElement2, Region)</l>
<c>        </c>
<l>        dev_display(Image)</l>
<l>        dev_display(Region)</l>
<l>        dev_disp_text('Final', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<c>        </c>
<c>        * HistoToThresh</c>
<l>        Sigma := 1</l>
<l>        union1(Region, Region)</l>
<l>        gray_histo(Region, Image1, AbsoluteHisto, RelativeHisto)</l>
<l>        histo_to_thresh(AbsoluteHisto, Sigma, MinThresh, MaxThresh)</l>
<l>        threshold(Image1, Region2, MinThresh, MaxThresh)</l>
<c>        </c>
<c>        * SelectShape</c>
<l>        select_shape(Region2, Region3, 'inner_radius', 'and', 92, 99999)</l>
<c>        </c>
<l>        dev_display(Image)</l>
<l>        dev_display(Region3)</l>
<l>        dev_disp_text('Final', 'window', 12, 12, 'black', [], [])</l>
<l>        stop()</l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
