<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'AirCarbon3_80.jpg_dark_2'</l>
<l>source_path := 'D:/evias_expmts/Aircarbon3/20210325_13h25_rov/training/80.jpg_dark_2/images'</l>
<l>labels_path := 'D:/evias_expmts/Aircarbon3/20210325_13h25_rov/training/80.jpg_dark_2/labels'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>dev_update_on()</l>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<l>list_image_files(labels_path, 'default', [], LabelFiles)</l>
<c></c>
<l>TotalMCC := 0.0</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    read_image(Label, LabelFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    *try</l>
<l>        FilterTypeSA_1 := 'x_binomial'</l>
<l>        MaxSizeSA_1 := 5</l>
<c>        </c>
<l>        Method := 'adapted_std_deviation'</l>
<l>        LightDark := 'dark'</l>
<l>        MaskSize := 15</l>
<l>        Scale := 0.3</l>
<c>        </c>
<l>        Filter := 'canny'</l>
<l>        Alpha := 1.3</l>
<l>        NonMaximumSuppression := 'nms'</l>
<l>        Low := 25</l>
<l>        High := 45</l>
<c>        </c>
<l>        FilterTpyeSA_2 := 'x_binomial'</l>
<l>        MaxSizeSA_2 := 7</l>
<c>        </c>
<l>        Sigma := 1</l>
<c>        </c>
<l>        A := 14</l>
<l>        B := 9</l>
<l>        C := 1.178097</l>
<c>        </c>
<c>        * Branch 1</c>
<l>        sobel_amp(Image, ImageAmp, FilterTypeSA_1, MaxSizeSA_1)</l>
<c>        </c>
<l>        access_channel(ImageAmp, ImageAmp, 1)</l>
<l>        convert_image_type(ImageAmp, ImageAmp, 'byte')</l>
<l>        local_threshold(ImageAmp, RegionA, Method, LightDark, ['mask_size', 'scale'], [MaskSize, Scale])</l>
<c>        </c>
<c>        * Branch 2</c>
<l>        edges_image(Image, ImageAmp2, ImaDir, Filter, Alpha, NonMaximumSuppression, Low, High)</l>
<c>        </c>
<l>        sobel_amp(ImageAmp2, ImageAmp2, FilterTpyeSA_2 , MaxSizeSA_2)</l>
<c>        </c>
<c>        * Merge: Histo To Thresh</c>
<l>        union1(RegionA, Region)        </l>
<c>        </c>
<l>        gray_histo(Region, ImageAmp2, AbsHisto, RelativeHisto)</l>
<l>        histo_to_thresh(AbsHisto, Sigma, MinThresh, MaxThresh)</l>
<l>        threshold(ImageAmp2, Region, MinThresh, MaxThresh)</l>
<c>        </c>
<c>        * Closing</c>
<l>        tuple_ceil(A + 1, shape_param0_ceil)    </l>
<l>        gen_circle(StructElement, shape_param0_ceil, shape_param0_ceil, A)</l>
<l>        closing(Region, StructElement, Region)</l>
<c>        </c>
<l>    *catch (Exception)</l>
<l>    *    gen_empty_region(Region)</l>
<l>    *endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    *write_image(ImageResult, 'png', 0, out_img_path)</l>
<c>     </c>
<l>    binary_threshold(Label, LabelRegion, 'max_separability', 'light', UsedThreshold)</l>
<c>    </c>
<c>    * -- Compute MCC between predicted region and GT region for one image</c>
<c>    * mcc_region := procedure (PredRegion, GTRegion, Width, Height : MCC :) </c>
<c>    </c>
<c>    * Intersection (TP)</c>
<l>    intersection (Region, LabelRegion, R_tp)</l>
<l>    union1(R_tp, R_tp)</l>
<l>    area_center (R_tp, TP, Row, Col)</l>
<c>    </c>
<c>    * FP = Pred minus GT</c>
<l>    difference (Region, LabelRegion, R_fp)</l>
<l>    union1(R_fp, R_fp)</l>
<l>    area_center (R_fp, FP, Row, Col)</l>
<c>    </c>
<c>    * FN = GT minus Pred</c>
<l>    difference (LabelRegion, Region, R_fn)</l>
<l>    union1(R_fn, R_fn)</l>
<l>    area_center (R_fn, FN, Row, Col)</l>
<c>    </c>
<c>    * TN = total - (TP+FP+FN)</c>
<l>    Total := Width * Height</l>
<l>    TN := max2(0, Total - (TP + FP + FN))</l>
<c>    </c>
<l>    tuple_add(TP, FP, TP_plus_FP)</l>
<l>    tuple_add(TP, FN, TP_plus_FN)</l>
<l>    tuple_add(TN, FP, TN_plus_FP)</l>
<l>    tuple_add(TN, FN, TN_plus_FN)</l>
<c>    </c>
<l>    tuple_real(TN_plus_FN, TN_plus_FN)</l>
<l>    tuple_real(TP_plus_FN, TP_plus_FN)</l>
<l>    tuple_real(TN_plus_FP, TN_plus_FP)</l>
<l>    tuple_real(TN_plus_FN, TN_plus_FN)</l>
<c>    </c>
<l>    tuple_mult(TP_plus_FP, TP_plus_FN, Prod)</l>
<l>    tuple_mult(Prod, TN_plus_FP, Prod)</l>
<l>    tuple_mult(Prod, TN_plus_FN, Prod)</l>
<l>*    Den := sqrt((TP+FP) * (TP+FN) * (TN+FP) * (TN+FN))</l>
<c>    </c>
<l>    tuple_sqrt(Prod, Den)</l>
<c>    </c>
<l>    ImageMCC := 0.0</l>
<l>    if (Den &lt;= 0)</l>
<l>        ImageMCC := 0.0</l>
<l>    else</l>
<l>        *MCC := ((TP * TN) - (FP * FN)) / Den</l>
<l>        tuple_mult(TP, TN, TP_mult_TN)</l>
<l>        tuple_mult(FP, FN, FP_mult_FN)</l>
<c>            </c>
<l>        numerator := TP_mult_TN - FP_mult_FN</l>
<l>        if(Den &gt; 0.0)</l>
<l>            ImageMCC := ImageMCC + (numerator / Den)</l>
<l>        endif</l>
<l>        ImageMCC := ImageMCC / |TP_mult_TN|</l>
<l>    endif</l>
<c></c>
<l>    TotalMCC := TotalMCC + ImageMCC</l>
<l>    dev_display(Region)</l>
<l>    dev_disp_text(ImageMCC, 'window', 10, 10, 'red', [], [])</l>
<l>    dev_disp_text(TotalMCC, 'window', 30, 10, 'black', [], [])</l>
<l>    stop()</l>
<l>endfor</l>
<c></c>
<l>MCC := TotalMCC / |ImageFiles|</l>
<c></c>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
