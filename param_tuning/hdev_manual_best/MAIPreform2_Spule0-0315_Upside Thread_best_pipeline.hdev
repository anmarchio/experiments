<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MAIPreform2_Spule0-0315_Upside_best_pipeline'</l>
<l>source_path := 'D:/evias_expmts/MAIPreform2.0/20170502_Compositence/Spule0-0315_Upside/undone_thread_hole/training/images'</l>
<l>labels_path := 'D:/evias_expmts/MAIPreform2.0/20170502_Compositence/Spule0-0315_Upside/undone_thread_hole/training/labels'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>dev_update_off()</l>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<l>list_image_files(labels_path, 'default', [], LabelFiles)</l>
<c></c>
<l>TotalMCC := 0.0</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    read_image(Label, LabelFiles[Index])</l>
<c>    </c>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try      </l>
<c>        * Parameters</c>
<l>        A := 12</l>
<l>        B := 18</l>
<l>        GrayValueMax := 2</l>
<c>        </c>
<l>        MinRatio := 0.02</l>
<l>        MaskHeight := 7</l>
<l>        MaskWidth := 29</l>
<c>        </c>
<c>        * GrayClosing</c>
<l>        get_image_type(Image, Type)</l>
<l>        gen_disc_se(SE, Type, A, B, GrayValueMax)</l>
<l>        gray_closing(Image, SE, Image)</l>
<c>        </c>
<c>        * CropRectangle</c>
<c>        * get_crop_rectangle()</c>
<c>        </c>
<l>        tuple_real(MinRatio, MinRatio)</l>
<l>        gen_empty_region(Region)</l>
<c>        </c>
<l>        count_channels(Image, NumChannels)</l>
<l>        if(NumChannels &gt; 1)</l>
<l>            access_channel(Image, Image, 1)          </l>
<l>        endif</l>
<c>        </c>
<l>        get_image_type(Image, Type)</l>
<l>        if(Type != 'byte' and Type != 'uint2' and Type != 'direction' and Type != 'cyclic' and Type != 'real')</l>
<l>            convert_image_type(Image, Image, 'byte')</l>
<l>        endif</l>
<l>        fast_threshold(Image, Region, 45, 255, 80)</l>
<l>        fill_up(Region, Rectangle)</l>
<c>        </c>
<l>        gen_empty_obj(FaultyRegion)</l>
<l>        gen_empty_obj(NewImgReduced)</l>
<l>        gen_empty_obj(ImgPart)</l>
<l>        gen_empty_obj(RelativeRegion)</l>
<c>        </c>
<l>        smallest_rectangle1(Rectangle, Row1, Col1, Row2, Col2)</l>
<l>        reduce_domain(Image, Rectangle, NewImageReduced)</l>
<l>        region_features(Rectangle, 'width', RegWidth)</l>
<l>        region_features(Rectangle, 'height', RegHeight)</l>
<c>        </c>
<l>        WStep := RegWidth / MaskWidth</l>
<l>        HStep := RegHeight / MaskHeight</l>
<c>        </c>
<l>        EndW := (Col2 - (WStep / 1.5)) - 20</l>
<l>        StepW := WStep / 2</l>
<c>        </c>
<l>        for ImgWidth := Col1 + 20 to EndW by StepW</l>
<l>            EndH := Row2 - (HStep / 1.5)            </l>
<l>            StepH := HStep / 2</l>
<c>            </c>
<l>            if(StepW == 0.0)</l>
<l>                break</l>
<l>            endif</l>
<c>            </c>
<l>            for ImgHeight := Row1 + 3 to EndH by StepH</l>
<l>                if(StepH == 0.0)</l>
<l>                    break</l>
<l>                endif</l>
<l>                gen_empty_obj(ImagePart)</l>
<l>                crop_rectangle1(NewImageReduced, ImgPart, ImgHeight, ImgWidth, ImgHeight + HStep, ImgWidth + WStep)</l>
<c>                </c>
<l>                gray_histo_range(ImgPart, ImgPart, 0, 255, 2, Histo, BinSize)</l>
<c>                </c>
<l>                PixelCount := Histo[0] + Histo[1]</l>
<c>                </c>
<l>                tuple_real(PixelCount, PixelCount)</l>
<c>                </c>
<l>                if(PixelCount &lt;= 0.6 * WStep * HStep)</l>
<l>                    continue</l>
<l>                endif</l>
<l>                Ratio := (Histo[1] * 1.0) / (PixelCount * 1.0)</l>
<c>                </c>
<l>                if(Ratio &lt; MinRatio)</l>
<l>                    gen_rectangle1(FaultyRegion, ImgHeight, ImgWidth, ImgHeight + HStep, ImgWidth + WStep)</l>
<l>                    concat_obj(FaultyRegion, RelativeRegion, FaultyRegion)</l>
<l>                    union1(FaultyRegion, RelativeRegion)</l>
<l>                endif</l>
<l>            endfor</l>
<l>        endfor</l>
<c></c>
<l>        count_obj(RelativeRegion, Number)</l>
<l>        if(Number == 0)</l>
<l>            gen_empty_region(Region)</l>
<l>        else</l>
<l>            Region := RelativeRegion</l>
<l>        endif</l>
<c>        </c>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    out_img_path := output_path + Index</l>
<l>    *write_image(ImageResult, 'png', 0, out_img_path)</l>
<c></c>
<l>    binary_threshold(Label, LabelRegion, 'max_separability', 'light', UsedThreshold)</l>
<c>    </c>
<c>    * -- Compute MCC between predicted region and GT region for one image</c>
<c>    * mcc_region := procedure (PredRegion, GTRegion, Width, Height : MCC :) </c>
<c>    </c>
<c>    * Intersection (TP)</c>
<l>    intersection (Region, LabelRegion, R_tp)</l>
<l>    union1(R_tp, R_tp)</l>
<l>    area_center (R_tp, TP, Row, Col)</l>
<c>    </c>
<c>    * FP = Pred minus GT</c>
<l>    difference (Region, LabelRegion, R_fp)</l>
<l>    union1(R_fp, R_fp)</l>
<l>    area_center (R_fp, FP, Row, Col)</l>
<c>    </c>
<c>    * FN = GT minus Pred</c>
<l>    difference (LabelRegion, Region, R_fn)</l>
<l>    union1(R_fn, R_fn)</l>
<l>    area_center (R_fn, FN, Row, Col)</l>
<c>    </c>
<c>    * TN = total - (TP+FP+FN)</c>
<l>    Total := Width * Height</l>
<l>    TN := max2(0, Total - (TP + FP + FN))</l>
<c>    </c>
<l>    tuple_add(TP, FP, TP_plus_FP)</l>
<l>    tuple_add(TP, FN, TP_plus_FN)</l>
<l>    tuple_add(TN, FP, TN_plus_FP)</l>
<l>    tuple_add(TN, FN, TN_plus_FN)</l>
<c>    </c>
<l>    tuple_real(TN_plus_FN, TN_plus_FN)</l>
<l>    tuple_real(TP_plus_FN, TP_plus_FN)</l>
<l>    tuple_real(TN_plus_FP, TN_plus_FP)</l>
<l>    tuple_real(TN_plus_FN, TN_plus_FN)</l>
<c>    </c>
<l>    tuple_mult(TP_plus_FP, TP_plus_FN, Prod)</l>
<l>    tuple_mult(Prod, TN_plus_FP, Prod)</l>
<l>    tuple_mult(Prod, TN_plus_FN, Prod)</l>
<l>*    Den := sqrt((TP+FP) * (TP+FN) * (TN+FP) * (TN+FN))</l>
<c>    </c>
<l>    tuple_sqrt(Prod, Den)</l>
<c>    </c>
<l>    ImageMCC := 0.0</l>
<l>    if (Den &lt;= 0)</l>
<l>        ImageMCC := 0.0</l>
<l>    else</l>
<l>        *MCC := ((TP * TN) - (FP * FN)) / Den</l>
<l>        tuple_mult(TP, TN, TP_mult_TN)</l>
<l>        tuple_mult(FP, FN, FP_mult_FN)</l>
<c>            </c>
<l>        numerator := TP_mult_TN - FP_mult_FN</l>
<l>        if(Den &gt; 0.0)</l>
<l>            ImageMCC := ImageMCC + (numerator / Den)</l>
<l>        endif</l>
<l>        ImageMCC := ImageMCC / |TP_mult_TN|</l>
<l>    endif</l>
<c></c>
<l>    TotalMCC := TotalMCC + ImageMCC</l>
<l>    dev_display(Region)</l>
<l>    dev_disp_text(ImageMCC, 'window', 10, 10, 'red', [], [])</l>
<l>    dev_disp_text(TotalMCC, 'window', 30, 10, 'black', [], [])</l>
<l>    wait_seconds(0.5)</l>
<l>endfor</l>
<c></c>
<l>MCC := TotalMCC / |ImageFiles|</l>
<l>wait_seconds(0.5)</l>
<l>dev_disp_text(MCC, 'window', 30, 10, 'black', [], [])</l>
<c></c>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
