<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MAIPreform2_Spule0-0315_Upside_Thread_256_mean_pipeline'</l>
<l>source_path := 'D:/evias_expmts/MAIPreform2.0/20170502_Compositence/Spule0-0315_Upside/undone_thread_hole_256/training/images'</l>
<l>labels_path := 'D:/evias_expmts/MAIPreform2.0/20170502_Compositence/Spule0-0315_Upside/undone_thread_hole_256/training/labels'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>dev_update_on()</l>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<l>list_image_files(labels_path, 'default', [], LabelFiles)</l>
<c></c>
<l>TotalMCC := 0.0</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    read_image(Label, LabelFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try </l>
<c>        * Parameters</c>
<c>        </c>
<c>        * GrayClosing</c>
<c>        * SE Circle</c>
<l>        A1 := 11</l>
<l>        B1 := 25</l>
<l>        GrayValueMax1 := 5</l>
<c>        </c>
<c>        * Threshold</c>
<l>        Min := 10</l>
<l>        Max := 200</l>
<c>        </c>
<c>        * Branch 2: Gray Dilation</c>
<c>        * SE: Circle</c>
<l>        A2 := 4</l>
<l>        B2 := 12</l>
<l>        GrayValueMax2 := 10</l>
<c></c>
<c>        * Zero Crossing</c>
<c>        * --</c>
<c>        </c>
<c>        * Merge: Opening</c>
<c>        * SE: Rectangle</c>
<l>        A3 := 26</l>
<l>        B3 := 21</l>
<c></c>
<c>        * BRANCH 1</c>
<c>        * GrayClosing</c>
<l>        gen_disc_se(SE1, 'byte', A1, B1, GrayValueMax1)</l>
<l>        gray_closing(Image, SE1, ImageClosing)</l>
<c>        </c>
<c>        * Threshold</c>
<l>        threshold(ImageClosing, RegionThresh, Min, Max)</l>
<c>        </c>
<c>        * --------</c>
<c>        * Branch 2</c>
<c>        * Gray Dilation</c>
<l>        gen_disc_se(SE2, 'byte', A2, B2, GrayValueMax2)</l>
<l>        gray_dilation(Image, SE2, ImageDilation)</l>
<c>        </c>
<c>        * Zero Crossing</c>
<l>        convert_image_type(ImageDilation, ImageDilation, 'int2')</l>
<l>        zero_crossing(ImageDilation, RegionCrossing)</l>
<c>        </c>
<c>        * --------</c>
<c>        * Merge</c>
<l>        union2(RegionThresh, RegionCrossing, RegionUnion)</l>
<c>        </c>
<c>        * Opening        </c>
<l>        gen_rectangle1(SE3, 0, 0, A3, B3)</l>
<l>        opening(RegionUnion, SE3, Region)  </l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    out_img_path := output_path + Index</l>
<l>    *write_image(ImageResult, 'png', 0, out_img_path)</l>
<c></c>
<l>    binary_threshold(Label, LabelRegion, 'max_separability', 'light', UsedThreshold)</l>
<c>    </c>
<c>    * -- Compute MCC between predicted region and GT region for one image</c>
<c>    * mcc_region := procedure (PredRegion, GTRegion, Width, Height : MCC :) </c>
<c>    </c>
<c>    * Intersection (TP)</c>
<l>    intersection (Region, LabelRegion, R_tp)</l>
<l>    union1(R_tp, R_tp)</l>
<l>    area_center (R_tp, TP, Row, Col)</l>
<c>    </c>
<c>    * FP = Pred minus GT</c>
<l>    difference (Region, LabelRegion, R_fp)</l>
<l>    union1(R_fp, R_fp)</l>
<l>    area_center (R_fp, FP, Row, Col)</l>
<c>    </c>
<c>    * FN = GT minus Pred</c>
<l>    difference (LabelRegion, Region, R_fn)</l>
<l>    union1(R_fn, R_fn)</l>
<l>    area_center (R_fn, FN, Row, Col)</l>
<c>    </c>
<c>    * TN = total - (TP+FP+FN)</c>
<l>    Total := Width * Height</l>
<l>    TN := max2(0, Total - (TP + FP + FN))</l>
<c>    </c>
<l>    tuple_add(TP, FP, TP_plus_FP)</l>
<l>    tuple_add(TP, FN, TP_plus_FN)</l>
<l>    tuple_add(TN, FP, TN_plus_FP)</l>
<l>    tuple_add(TN, FN, TN_plus_FN)</l>
<c>    </c>
<l>    tuple_real(TN_plus_FN, TN_plus_FN)</l>
<l>    tuple_real(TP_plus_FN, TP_plus_FN)</l>
<l>    tuple_real(TN_plus_FP, TN_plus_FP)</l>
<l>    tuple_real(TN_plus_FN, TN_plus_FN)</l>
<c>    </c>
<l>    tuple_mult(TP_plus_FP, TP_plus_FN, Prod)</l>
<l>    tuple_mult(Prod, TN_plus_FP, Prod)</l>
<l>    tuple_mult(Prod, TN_plus_FN, Prod)</l>
<l>*    Den := sqrt((TP+FP) * (TP+FN) * (TN+FP) * (TN+FN))</l>
<c>    </c>
<l>    tuple_sqrt(Prod, Den)</l>
<c>    </c>
<l>    ImageMCC := 0.0</l>
<l>    if (Den &lt;= 0)</l>
<l>        ImageMCC := 0.0</l>
<l>    else</l>
<l>        *MCC := ((TP * TN) - (FP * FN)) / Den</l>
<l>        tuple_mult(TP, TN, TP_mult_TN)</l>
<l>        tuple_mult(FP, FN, FP_mult_FN)</l>
<c>            </c>
<l>        numerator := TP_mult_TN - FP_mult_FN</l>
<l>        if(Den &gt; 0.0)</l>
<l>            ImageMCC := ImageMCC + (numerator / Den)</l>
<l>        endif</l>
<l>        ImageMCC := ImageMCC / |TP_mult_TN|</l>
<l>    endif</l>
<c></c>
<l>    TotalMCC := TotalMCC + ImageMCC</l>
<l>    dev_display(Region)</l>
<l>    dev_disp_text(ImageMCC, 'window', 10, 10, 'red', [], [])</l>
<l>    dev_disp_text(TotalMCC, 'window', 30, 10, 'black', [], [])</l>
<l>    wait_seconds(0.5)</l>
<l>endfor</l>
<c></c>
<l>MCC := TotalMCC / |ImageFiles|</l>
<l>wait_seconds(0.5)</l>
<l>dev_disp_text(MCC, 'window', 30, 10, 'black', [], [])</l>
<c></c>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
