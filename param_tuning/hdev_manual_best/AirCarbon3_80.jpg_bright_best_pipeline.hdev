<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'AirCarbon3_80.jpg_bright_mean_pipeline'</l>
<l>source_path := 'D:/evias_expmts/Aircarbon3/20210325_13h25_rov/training/80.jpg_bright/images'</l>
<l>out_path := 'C:/dev/experiments/param_tuning/hdev_manual_best/' + dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 1 to |ImageFiles| - 1 by 1</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try        </l>
<l>        Sigma := 0.1</l>
<l>        Rho := 2</l>
<l>        Theta := 0.1</l>
<l>        Iterations := 328</l>
<c>        </c>
<l>        FilterTypeSA := 'y'</l>
<l>        MaskSizeSA := 5</l>
<c>        </c>
<l>        Method := 'adapted_std_deviation'</l>
<l>        LightDark := 'dark'</l>
<l>        MaskSizeLT := 15</l>
<l>        Scale := 0.3</l>
<c>        </c>
<l>        coherence_enhancing_diff (Image, Image, Sigma, Rho, Theta, Iterations)</l>
<c>        </c>
<l>        sobel_amp(Image, ImageAmp, FilterTypeSA, MaskSizeSA)</l>
<c>        </c>
<l>        access_channel(ImageAmp, ImageAmp, 1)</l>
<l>        convert_image_type(ImageAmp, ImageAmp, 'byte')</l>
<c>        </c>
<l>        local_threshold(ImageAmp, Region, Method, LightDark, ['mask_size', 'scale'], [MaskSizeLT, Scale])</l>
<c>        </c>
<l>        union1(Region, Region)</l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    file_exists(out_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(out_path)</l>
<l>    endif</l>
<l>    out_img_path := out_path + Index</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
