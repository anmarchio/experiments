<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MAIPreform2_Spule0-0315_Upside_mean_pipeline'</l>
<l>source_path := 'C:/evias_expmts/MAIPreform2.0/20170502_Compositence/Spule0-0315_Upside/undone/training/images'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try        </l>
<l>        FilterTypeSA := 'y'</l>
<l>        MaskSizeSA := 5</l>
<c>        </c>
<l>        Channel := 1</l>
<l>        Threshold := 23</l>
<l>        *Sign := -1</l>
<c>        </c>
<l>        DiffusionCoefficient := 'parabolic'</l>
<l>        Contrast := 10</l>
<l>        Theta := 3</l>
<l>        Iterations := 1</l>
<c>        </c>
<c>        * SobelAmp    </c>
<l>        sobel_amp(Image, ImageA, FilterTypeSA, MaskSizeSA)</l>
<c>        </c>
<c>        * ZeroCrossingB</c>
<l>        zero_crossing(ImageA, RegionA)</l>
<c>        </c>
<c>        * ThresholdAccessChannel        </c>
<l>        abs_image(Image, ImageB)        </l>
<l>        count_channels(ImageB, NumChannels)</l>
<l>        if(NumChannels == 3)</l>
<l>           access_channel(ImageB, ImageB, Channel)</l>
<l>           threshold(ImageB, RegionB, Threshold, 255)</l>
<l>        else</l>
<l>            threshold(ImageB, RegionB, Threshold, 255)</l>
<l>        endif</l>
<c>        </c>
<c>        * AnisotropicDiffusion</c>
<l>        anisotropic_diffusion(ImageB, ImageB, DiffusionCoefficient, Contrast, Theta, Iterations)</l>
<c>        </c>
<l>        union2(RegionA, RegionB, Region)</l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    out_img_path := output_path + Index</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
