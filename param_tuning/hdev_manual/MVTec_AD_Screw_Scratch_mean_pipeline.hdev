<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MVTec_AD_Screw_Scratch_mean_pipeline'</l>
<l>source_path := 'C:/evias_expmts/MVTecAnomalyDetection/screw_scratch_neck_train/images'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try</l>
<c>        * PATH 1</c>
<c>        * ------</c>
<c>        * DualRank</c>
<c>        *4 [label="DualRank\nMaskType=circle\n Radius=47\n ModePercent=17\n Margin=TwoFifityFive"];</c>
<l>        MaskType := 'circle'</l>
<l>        Radius := 47</l>
<l>        ModePercent := 17</l>
<l>        Margin := 'TwoFifityFive'</l>
<c>        </c>
<c>        *mirrored = 1,</c>
<c>        *cyclic = 2,</c>
<c>        *continued = 3, </c>
<c>        *//0, 30, 60, 90, 120, 150, 180, 210, 240, 255</c>
<l>        if(Margin == 'Zero')</l>
<l>            Margin := 0</l>
<l>        elseif(Margin == 'Thirty')</l>
<l>            Margin := 30</l>
<l>        elseif(Margin == 'Sixty')</l>
<l>            Margin := 60</l>
<l>        elseif(Margin == 'Ninety')</l>
<l>            Margin := 90</l>
<l>        elseif(Margin == 'OneTwenty')</l>
<l>            Margin := 120</l>
<l>        elseif(Margin == 'OneFifty')</l>
<l>            Margin := 150</l>
<l>        elseif(Margin == 'OneEighty')</l>
<l>            Margin := 180</l>
<l>        elseif(Margin == 'TwoTen')</l>
<l>            Margin := 210</l>
<l>        elseif(Margin == 'TwoForty')</l>
<l>            Margin := 240</l>
<l>        elseif(Margin == 'TwoFifityFive')</l>
<l>            Margin := 255</l>
<l>        endif</l>
<c>        </c>
<l>        dual_rank(Image, Image1, MaskType, Radius, ModePercent, Margin)</l>
<c>        </c>
<c>        * CropRectangle</c>
<c>        *22 [label="CropRectangle\nMinRatio=0,0249999985098839\n MaskHeight=13\n MaskWidth=19"];</c>
<l>        MinRatio := 0.0249999985098839</l>
<l>        MaskHeight := 13</l>
<l>        MaskWidth := 19</l>
<c>        </c>
<l>        tuple_real(MinRatio, MinRatio)</l>
<l>        gen_empty_region(Region1)</l>
<c>        </c>
<l>        count_channels(Image1, NumChannels)</l>
<l>        if(NumChannels &gt; 1)</l>
<l>            access_channel(Image1, Image1, 1)          </l>
<l>        endif</l>
<c>        </c>
<l>        get_image_type(Image1, Type)</l>
<l>        if(Type != 'byte' and Type != 'uint2' and Type != 'direction' and Type != 'cyclic' and Type != 'real')</l>
<l>            convert_image_type(Image1, Image1, 'byte')</l>
<l>        endif</l>
<l>        fast_threshold(Image1, Region1, 45, 255, 80)</l>
<l>        fill_up(Region1, Rectangle)</l>
<c>        </c>
<l>        gen_empty_obj(FaultyRegion)</l>
<l>        gen_empty_obj(NewImgReduced)</l>
<l>        gen_empty_obj(ImgPart)</l>
<l>        gen_empty_obj(RelativeRegion)</l>
<c>        </c>
<l>        smallest_rectangle1(Rectangle, Row1, Col1, Row2, Col2)</l>
<l>        reduce_domain(Image1, Rectangle, NewImageReduced)</l>
<l>        region_features(Rectangle, 'width', RegWidth)</l>
<l>        region_features(Rectangle, 'height', RegHeight)</l>
<c>        </c>
<l>        WStep := RegWidth / MaskWidth</l>
<l>        HStep := RegHeight / MaskHeight</l>
<c>        </c>
<l>        EndW := (Col2 - (WStep / 1.5)) - 20</l>
<l>        StepW := WStep / 2</l>
<c>        </c>
<c>        </c>
<l>        for ImgWidth := Col1 + 20 to EndW by StepW</l>
<l>            EndH := Row2 - (HStep / 1.5)            </l>
<l>            StepH := HStep / 2</l>
<c>            </c>
<l>            if(StepW == 0.0)</l>
<l>                break</l>
<l>            endif</l>
<c>            </c>
<l>            for ImgHeight := Row1 + 3 to EndH by StepH</l>
<l>                if(StepH == 0.0)</l>
<l>                    break</l>
<l>                endif</l>
<c>                </c>
<l>                gen_empty_obj(ImagePart)</l>
<l>                crop_rectangle1(NewImageReduced, ImagePart, ImgHeight, ImgWidth, ImgHeight + HStep, ImgWidth + WStep)</l>
<c>                </c>
<l>                gray_histo_range(ImagePart, ImagePart, 0, 255, 2, Histo, BinSize)</l>
<c>                </c>
<l>                PixelCount := Histo[0] + Histo[1]</l>
<c>                </c>
<l>                tuple_real(PixelCount, PixelCount)</l>
<c>                </c>
<l>                if(PixelCount &lt;= 0.6 * WStep * HStep)</l>
<l>                    continue</l>
<l>                endif</l>
<l>                Ratio := (Histo[1] * 1.0) / (PixelCount * 1.0)</l>
<c>                </c>
<l>                if(Ratio &lt; MinRatio)</l>
<l>                    gen_rectangle1(FaultyRegion, ImgHeight, ImgWidth, ImgHeight + HStep, ImgWidth + WStep)</l>
<l>                    concat_obj(FaultyRegion, RelativeRegion, FaultyRegion)</l>
<l>                    union1(FaultyRegion, RelativeRegion)</l>
<l>                endif</l>
<l>            endfor</l>
<l>        endfor</l>
<c></c>
<l>        count_obj(RelativeRegion, Number)</l>
<l>        if(Number == 0)</l>
<l>            gen_empty_region(Region1)</l>
<l>        else</l>
<l>            Region1 := RelativeRegion</l>
<l>        endif</l>
<c>        </c>
<c>        * PATH 2</c>
<c>        * ------</c>
<c>        * AreaSizeThreshold</c>
<c>        *20 [label="AreaSizeThreshold\nMinGray=20\n MaxGray=254\n MinSize=9000\n MaxSize=18000\n WindowWidth=320\n WindowHeight=260"];</c>
<l>        MinGray := 20</l>
<l>        MaxGray := 254</l>
<l>        MinSize := 900</l>
<l>        MaxSize := 18000</l>
<l>        WindowWidth := 320</l>
<l>        WindowHeight := 260</l>
<c>        </c>
<l>        abs_image(Image, Image2)</l>
<c>        </c>
<l>*        MinGray := 20</l>
<l>*        MaxGray := 255</l>
<l>        gen_empty_region(FaultyRegion)</l>
<l>        gen_empty_region(TempRegion)</l>
<c>        </c>
<l>        get_image_size(Image2, Width, Height)</l>
<c>        </c>
<l>        I_W := Width / WindowWidth</l>
<l>        I_H := Height / WindowHeight</l>
<c>        </c>
<l>        for i := 0 to I_W by 1</l>
<c>            </c>
<l>            for j := 0 to I_H by 1</l>
<l>                Row1 := j * WindowHeight</l>
<l>                Col1 := i * WindowHeight</l>
<l>                Row2 := j * WindowHeight + WindowHeight</l>
<l>                Col2 := i * WindowHeight + WindowHeight</l>
<c>                </c>
<l>                if(Row2 &gt; Height)</l>
<l>                    Row2 := Height</l>
<l>                endif</l>
<c>                </c>
<l>                if(Col2 &gt; Width)</l>
<l>                    Col2 := Width</l>
<l>                endif</l>
<c>                </c>
<l>                if(Row1 &gt; Height)</l>
<l>                    Row1 := Height - 1</l>
<l>                endif</l>
<c>                </c>
<l>                if(Col1 &gt; Width)</l>
<l>                    Col1 := Width - 1</l>
<l>                endif</l>
<c>                </c>
<l>                crop_rectangle1(Image2, ImagePart, Row1, Col1, Row2, Col2)</l>
<l>                threshold(ImagePart, Threads, 40, 255)</l>
<l>                area_center(Threads, AreaSize, Row, Col)</l>
<c>                </c>
<l>                if(AreaSize &lt; MaxSize and AreaSize &gt; MinSize)</l>
<l>                    gen_rectangle1(TempRegion, Row, Col, Row, Col)</l>
<l>                    union2(TempRegion, FaultyRegion, FaultyRegion)</l>
<l>                endif</l>
<c>                </c>
<l>                smallest_rectangle1(FaultyRegion, Row1, Col1, Row2, Col2)</l>
<l>                region_features(FaultyRegion, 'area', Value)        </l>
<l>            endfor</l>
<l>        endfor</l>
<c>        </c>
<l>        count_obj(FaultyRegion, Number)</l>
<l>        if(Number &gt; 0)</l>
<l>            Region2 := FaultyRegion</l>
<l>        else</l>
<l>            gen_empty_region(Region2)</l>
<l>        endif</l>
<c>        </c>
<c>        * Opening</c>
<c>        *37 [label="Opening\nStructElement=Ellipse\n A=19\n B=18"];</c>
<l>        A := 19</l>
<l>        B := 18</l>
<c>        </c>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        tuple_max2(A, B, max_rad)</l>
<l>        longer := A</l>
<l>        shorter := B            </l>
<l>        if (shorter &gt; longer)</l>
<l>            tmp := shorter</l>
<l>            shorter := longer</l>
<l>            longer := tmp</l>
<l>        endif                </l>
<l>        phi := 0.0           </l>
<l>        tuple_ceil(max_rad + 1, max_rad_ceil)            </l>
<l>        gen_ellipse(StructElement, max_rad_ceil, max_rad_ceil, phi, longer, shorter)</l>
<c>        </c>
<l>        union2(Region1, Region2, Region)</l>
<l>        opening(Region, StructElement, Region)</l>
<c>        </c>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
