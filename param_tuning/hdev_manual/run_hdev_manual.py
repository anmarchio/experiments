"""
This script will iteratively run all hdev functions
in this folder containing the pipelines generated by CGP optimization.

All hdev files have been manually created and edited from digraph code.
"""

# Datasets used in experiments
HDEV_DATASETS = [
    'mvtec_tile',
    'mvtec_bottle',
    'mvtec_cable'
    #more ...
]


def get_mvtec_tile() -> str:
    """
    This is the actual function
    """
    bounds = [
        [],
        []
        #...
        ]
    hdev = ""

    return hdev


def get_function(dataset) -> str:
    """
    Get any function in this list
    """
    if dataset == 'mvtec_tile':
        return get_mvtec_tile()


"""
============================
manual_hdev_pipelines.py
============================
"""

manual_hdev_pipelines = {
    'cable-202307235925',
    'pul-202307235925'
}

def get_hdev_pipeline(dataset_date: str, params: []):
    if dataset_date == "cable_20235kdf":
        return get_cable_203585(params)
    elif:
        pass


def get_hdev_pipeline_bounds(dataset_date: str) -> []:
    if dataset_date == "cable-2038324":
        return cable_2038324_bounds
    elif:
        pass

"""
============================
get_cable_203585.py
============================
"""
def get_cable_203585(params):
    hdev_code = "minGray := ...\n" + \
                "maxGray := ...\n"
    # more code

    return hdev_code

cable_2038324_bounds = [
    [0,255],
    [1,128]
    #more...
]