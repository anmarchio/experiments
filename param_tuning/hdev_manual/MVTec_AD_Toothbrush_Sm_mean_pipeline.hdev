<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MVTec_AD_Toothbrush_Sm_mean_pipeline'</l>
<l>source_path := 'D:/evias_expmts/MVTecAnomalyDetection/toothbrush_small_train/images'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try</l>
<l>        A := 16</l>
<l>        B := 13</l>
<l>        GrayValueMax := 0</l>
<c>        </c>
<l>        Min := 30 </l>
<l>        Max := 250</l>
<c>        </c>
<c>        * GrayClosing</c>
<c>        * 4 [label="GrayClosing\nStructElement=Circle\n A=16\n B=13\n GrayValueMax=0"];</c>
<c>        </c>
<c>        * with struct element circle</c>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        get_image_type(Image, Type)</l>
<l>        gen_disc_se(StructElement, Type, A, B, GrayValueMax)</l>
<l>        gray_closing(Image, StructElement, Image)</l>
<c>        </c>
<c>        * Threshold</c>
<c>        * 24 [label="Threshold\nMin=30\n Max=250"];</c>
<c>        </c>
<l>        threshold(Image, Region, Min, Max)</l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
