<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MVTec_AD_Carpet_mean_pipeline'</l>
<l>source_path := 'C:/evias_expmts/MVTecAnomalyDetection/carpet_train/images'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try</l>
<c>        * EdgesImage</c>
<c>        * 1 [label="EdgesImage\nFilter=canny\n Alpha=0,5\n Low=30\n High=45\n NonMaximumSuppression=nms"];</c>
<l>        Filter := 'canny'</l>
<l>        Alpha := 0.5</l>
<l>        Low := 30</l>
<l>        High := 45</l>
<l>        NonMaximumSuppression := 'nms'</l>
<l>        edges_image(Image, Image, ImaDir, Filter, Alpha, NonMaximumSuppression, Low, High)</l>
<c>        </c>
<c>        * SobelAmp        </c>
<l>        FilterType := 'y_binomial'</l>
<l>        MaskSize := 7</l>
<c>        </c>
<l>        get_image_type(Image, Type)</l>
<l>        if(FilterType == 'x_binomial' or FilterType == 'y_binomial')            </l>
<l>            if(Type != 'byte' and Type != 'int2' and Type != 'real')</l>
<l>                convert_image_type(Image, Image, 'byte')</l>
<l>            endif</l>
<l>        elseif(Type != 'byte' and Type != 'int2' and Type != 'uint2' and Type != 'real')</l>
<l>            convert_image_type(Image, Image, 'byte')</l>
<l>        endif</l>
<l>        sobel_amp(Image, Image, FilterType, MaskSize)</l>
<c>        </c>
<c>        * AutoThreshold</c>
<l>        Sigma := 0.5</l>
<c>        </c>
<l>        abs_image(Image, Image)</l>
<l>        if(Type != 'byte' and Type != 'uint2' and Type != 'real')</l>
<l>            convert_image_type(Image, Image, 'byte')</l>
<l>        endif</l>
<l>        auto_threshold(Image, Region, Sigma)</l>
<c>        </c>
<c>        * Dilation1</c>
<c>        * 33 [label="Dilation1\nIterations=30\n StructElement=Circle\n A=1\n B=18"];</c>
<l>        StructElement := 'Circle'</l>
<l>        A := 1</l>
<l>        B := 18</l>
<l>        Iterations := 30</l>
<l>        tuple_ceil(A + 1, param1)</l>
<l>        tuple_ceil(A + 1, param2)</l>
<l>        gen_circle(StructElement1, param1, param2, A)</l>
<l>        dilation1(Region, Region, StructElement1, Iterations)</l>
<c>        </c>
<c>        * Erosion1</c>
<c>        * 60 [label="Erosion1\nIterations=49\n StructElement=Ellipse\n A=6\n B=5"];     </c>
<l>        A := 6</l>
<l>        B := 5</l>
<l>        Iterations := 49</l>
<c>        </c>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        tuple_max2(A, B, max_rad)</l>
<l>        longer := A</l>
<l>        shorter := B            </l>
<l>        if (shorter &gt; longer)</l>
<l>            tmp := shorter</l>
<l>            shorter := longer</l>
<l>                    longer := tmp</l>
<l>        endif                </l>
<l>        phi := 0.0         </l>
<l>        tuple_ceil(max_rad + 1, max_rad_ceil)</l>
<l>        gen_ellipse(StructElement2, max_rad_ceil, max_rad_ceil, phi, longer, shorter)</l>
<c>        </c>
<l>        erosion1(Region, Region, StructElement2, Iterations)</l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
