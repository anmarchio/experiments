<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'severstal-steel_mean_pipeline'</l>
<l>source_path := 'C:/evias_expmts/severstal-steel/train_cgp/images'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try        </l>
<l>        MaskHeightBF := 17</l>
<l>        MaskWidthBF := 5</l>
<c>        </c>
<l>        MaskWidth := 29</l>
<l>        MaskHeight := 23</l>
<l>        StdDevScale := 0.2000001</l>
<l>        AbsThreshold := 13</l>
<l>        LightDark := 'not_equal'</l>
<c>        </c>
<c>        * BinomialFilter</c>
<c>        * 5 [label="BinomialFilter\nMaskHeight=17\n MaskWidth=5"];</c>
<l>        binomial_filter(Image, Image, MaskWidthBF, MaskHeightBF)</l>
<c>        </c>
<c>        * VarThreshold</c>
<c>        * 26 [label="VarThreshold\nMaskWidth=29\n MaskHeight=23\n StdDevScale=0.2000001\n AbsThreshold=13\n LightDark=not_equal"];</c>
<c>        </c>
<c>        </c>
<l>        get_image_type(Image, Type)</l>
<l>        if(Type != 'byte' and Type != 'int2' and Type != 'int4' and Type != 'uint2' and Type != 'real')</l>
<l>            min_max_gray(Image, Image, 0, Min, Max, Range)</l>
<l>            if (not( (255 &gt;= Max) and (Min &gt;= 0) ) )</l>
<l>                if ((Max - Min) &gt; 0)</l>
<l>                    Mult := 255.0 / (Max - Min)</l>
<l>                else</l>
<l>                    Mult := 255.0</l>
<l>                endif</l>
<l>                Add := -Mult * Min</l>
<l>                scale_image(Image, Image, Mult, Add)</l>
<l>            else</l>
<l>                scale_image(Image, Image, 1, 0)</l>
<l>            endif</l>
<c>            </c>
<l>            StandardType := 'byte'</l>
<l>            convert_image_type(Image, Image, 'byte')</l>
<l>            var_threshold(Image, Region, MaskWidth, MaskHeight, StdDevScale, AbsThreshold, LightDark)    </l>
<l>        else </l>
<l>            var_threshold(Image, Region, MaskWidth, MaskHeight, StdDevScale, AbsThreshold, LightDark)    </l>
<l>        endif</l>
<c></c>
<c>        * Union1</c>
<l>        union1(Region, Region)</l>
<c>        </c>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
