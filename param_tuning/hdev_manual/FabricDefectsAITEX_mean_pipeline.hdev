<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'FabricDefectsAITEX_mean_pipeline'</l>
<l>source_path := 'C:/evias_expmts/FabricDefectsAITEX/train/images'</l>
<l>out_path := 'C:/dev/experiments/param_tuning/hdev_manual/' + dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 1 to |ImageFiles| - 1 by 1</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try</l>
<l>        Method := 'smooth_histo'</l>
<l>        LightDark := 'light'</l>
<l>        binary_threshold(Image, Region, Method, LightDark, UsedThreshold)</l>
<c>        </c>
<l>        Min := 33</l>
<l>        Max := 99999</l>
<l>        Features := 'bulkiness'</l>
<l>        select_shape(Region, Regions, Features, 'and', Min, Max)</l>
<c>        </c>
<l>        A := 26</l>
<l>        B := 29</l>
<l>        C := 1.178097        </l>
<c>        * StructElementType Ellipse</c>
<c>        * using A, B and C as shape_params</c>
<l>        tuple_max2(A, B, max_rad)</l>
<l>        longer := A</l>
<l>        shorter := B            </l>
<l>        if (shorter &gt; longer)</l>
<l>            tmp := shorter</l>
<l>            shorter := longer</l>
<l>            longer := tmp</l>
<l>        endif                </l>
<l>        phi := C            </l>
<l>        tuple_ceil(max_rad + 1, max_rad_ceil)            </l>
<l>        gen_ellipse(StructElement, max_rad_ceil, max_rad_ceil, phi, longer, shorter)</l>
<c>        </c>
<c>        * Apply StructElement Ellipse to Closing</c>
<l>        closing(Regions, StructElement, RegionClosing)</l>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    file_exists(out_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(out_path)</l>
<l>    endif</l>
<l>    out_img_path := out_path + Index</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
