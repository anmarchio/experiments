<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<l>dataset_name := 'MVTec_AD_Leather_mean_pipeline'</l>
<l>source_path := 'C:/evias_expmts/MVTecAnomalyDetection/leather_train/images'</l>
<l>output_path := dataset_name + '/'</l>
<c></c>
<l>list_image_files(source_path, 'default', [], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    file_exists(output_path, dir_exists)</l>
<l>    if(dir_exists == 0)</l>
<l>        make_dir(output_path)</l>
<l>    endif</l>
<l>    out_img_path := output_path + Index + '.png'</l>
<l>    file_exists(out_img_path, exists)</l>
<l>    if(exists)</l>
<l>        delete_file(out_img_path)</l>
<l>    endif</l>
<l>    read_image(Image, ImageFiles[Index])</l>
<l>    get_image_size(Image, Width, Height)</l>
<c>    * --------------</c>
<c>    * CGP Code Block</c>
<c>    * --------------</c>
<l>    try        </l>
<l>        FilterType := 'y_binomial'</l>
<l>        MaskSize := 3</l>
<c>        </c>
<l>        MaskHeight := 17</l>
<l>        MaskWidth := 3 </l>
<l>        Sigma := 134</l>
<c>        </c>
<l>        Method := 'adapted_std_deviation'</l>
<l>        LightDark := 'light'</l>
<l>        MaskSize := 31</l>
<l>        Scale := 0.2</l>
<c>        </c>
<l>        MinAmplitude := 79</l>
<c>        </c>
<l>        A := 5</l>
<l>        B := 30</l>
<l>        C := 0</l>
<c>        * PATH 1</c>
<c>        * ------</c>
<c>        *</c>
<c>        * SobalAmp</c>
<c>        * 19 [label="SobelAmp\nFilterType=y_binomial\n MaskSize=3"];</c>
<c>        </c>
<l>        get_image_type(Image, Type)</l>
<l>        if(FilterType == 'x_binomial' or FilterType == 'y_binomial')            </l>
<l>            if(Type != 'byte' and Type != 'int2' and Type != 'real')</l>
<l>                convert_image_type(Image, Image, 'byte')</l>
<l>            endif</l>
<l>        elseif(Type != 'byte' and Type != 'int2' and Type != 'uint2' and Type != 'real')</l>
<l>            convert_image_type(Image, Image, 'byte')</l>
<l>        endif</l>
<l>        sobel_amp(Image, Image1, FilterType, MaskSize)</l>
<c>        </c>
<c>        * PATH 2</c>
<c>        * ------</c>
<c>        * </c>
<c>        * SigmaImage</c>
<c>        * 6 [label="SigmaImage\nMaskHeight=17\n MaskWidth=3\n Sigma=134"];</c>
<l>        sigma_image(Image, Image2, MaskHeight, MaskWidth, Sigma)</l>
<c></c>
<c>        * Local Threshold</c>
<c>        * 20 [label="LocalThreshold\nMethod=adapted_std_deviation\n LightDark=light\n MaskSize=31\n Scale=0,2"];</c>
<c>       </c>
<l>        local_threshold(Image2, Region2, Method, LightDark, ['mask_size', 'scale'], [MaskSize, Scale])</l>
<c>        </c>
<c>        * MERGE 1/2</c>
<c>        * ----------</c>
<c>        </c>
<c>        * CloseEdges</c>
<c>        * 54 [label="CloseEdges\nMinAmplitude=79"];</c>
<l>        close_edges(Region2, Image1, Region, MinAmplitude)</l>
<c>        </c>
<c>        * Closing</c>
<c>        * 68 [label="Closing\nA=5\n B=30\n C=0\n StructElementType=Rectangle"];</c>
<c>        </c>
<l>        gen_rectangle1(RectangleStructElement, 0, 0, A, B)</l>
<l>        closing(Region, RectangleStructElement, Region) </l>
<c>        </c>
<l>    catch (Exception)</l>
<l>        gen_empty_region(Region)</l>
<l>    endtry</l>
<c>    * --------------</c>
<c>    * END Code Block</c>
<c>    * --------------</c>
<l>    gen_image_const(ImageResult, 'byte', Width, Height)</l>
<l>    paint_region(Region, ImageResult, ImageResult, 255, 'fill')</l>
<l>    write_image(ImageResult, 'png', 0, out_img_path)</l>
<l>endfor</l>
<l>*exit()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
